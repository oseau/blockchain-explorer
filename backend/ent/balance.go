// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"math/big"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/oseau/blockchain-explorer/ent/balance"
)

// Balance is the model entity for the Balance schema.
type Balance struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Account holds the value of the "account" field.
	Account string `json:"account,omitempty"`
	// BlockNumber holds the value of the "block_number" field.
	BlockNumber *big.Int `json:"block_number,omitempty"`
	// Balance holds the value of the "balance" field.
	Balance      *big.Int `json:"balance,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Balance) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case balance.FieldID:
			values[i] = new(sql.NullInt64)
		case balance.FieldAccount:
			values[i] = new(sql.NullString)
		case balance.FieldBlockNumber:
			values[i] = balance.ValueScanner.BlockNumber.ScanValue()
		case balance.FieldBalance:
			values[i] = balance.ValueScanner.Balance.ScanValue()
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Balance fields.
func (b *Balance) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case balance.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			b.ID = int(value.Int64)
		case balance.FieldAccount:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field account", values[i])
			} else if value.Valid {
				b.Account = value.String
			}
		case balance.FieldBlockNumber:
			if value, err := balance.ValueScanner.BlockNumber.FromValue(values[i]); err != nil {
				return err
			} else {
				b.BlockNumber = value
			}
		case balance.FieldBalance:
			if value, err := balance.ValueScanner.Balance.FromValue(values[i]); err != nil {
				return err
			} else {
				b.Balance = value
			}
		default:
			b.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Balance.
// This includes values selected through modifiers, order, etc.
func (b *Balance) Value(name string) (ent.Value, error) {
	return b.selectValues.Get(name)
}

// Update returns a builder for updating this Balance.
// Note that you need to call Balance.Unwrap() before calling this method if this Balance
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Balance) Update() *BalanceUpdateOne {
	return NewBalanceClient(b.config).UpdateOne(b)
}

// Unwrap unwraps the Balance entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Balance) Unwrap() *Balance {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Balance is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Balance) String() string {
	var builder strings.Builder
	builder.WriteString("Balance(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("account=")
	builder.WriteString(b.Account)
	builder.WriteString(", ")
	builder.WriteString("block_number=")
	builder.WriteString(fmt.Sprintf("%v", b.BlockNumber))
	builder.WriteString(", ")
	builder.WriteString("balance=")
	builder.WriteString(fmt.Sprintf("%v", b.Balance))
	builder.WriteByte(')')
	return builder.String()
}

// Balances is a parsable slice of Balance.
type Balances []*Balance
