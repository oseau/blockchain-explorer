// Code generated by ent, DO NOT EDIT.

package balance

import (
	"fmt"
	"math/big"

	"entgo.io/ent/dialect/sql"
	"github.com/oseau/blockchain-explorer/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Balance {
	return predicate.Balance(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Balance {
	return predicate.Balance(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Balance {
	return predicate.Balance(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Balance {
	return predicate.Balance(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Balance {
	return predicate.Balance(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Balance {
	return predicate.Balance(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Balance {
	return predicate.Balance(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Balance {
	return predicate.Balance(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Balance {
	return predicate.Balance(sql.FieldLTE(FieldID, id))
}

// Account applies equality check predicate on the "account" field. It's identical to AccountEQ.
func Account(v string) predicate.Balance {
	return predicate.Balance(sql.FieldEQ(FieldAccount, v))
}

// BlockNumber applies equality check predicate on the "block_number" field. It's identical to BlockNumberEQ.
func BlockNumber(v *big.Int) predicate.Balance {
	vc, err := ValueScanner.BlockNumber.Value(v)
	return predicate.BalanceOrErr(sql.FieldEQ(FieldBlockNumber, vc), err)
}

// Balance applies equality check predicate on the "balance" field. It's identical to BalanceEQ.
func Balance(v *big.Int) predicate.Balance {
	vc, err := ValueScanner.Balance.Value(v)
	return predicate.BalanceOrErr(sql.FieldEQ(FieldBalance, vc), err)
}

// AccountEQ applies the EQ predicate on the "account" field.
func AccountEQ(v string) predicate.Balance {
	return predicate.Balance(sql.FieldEQ(FieldAccount, v))
}

// AccountNEQ applies the NEQ predicate on the "account" field.
func AccountNEQ(v string) predicate.Balance {
	return predicate.Balance(sql.FieldNEQ(FieldAccount, v))
}

// AccountIn applies the In predicate on the "account" field.
func AccountIn(vs ...string) predicate.Balance {
	return predicate.Balance(sql.FieldIn(FieldAccount, vs...))
}

// AccountNotIn applies the NotIn predicate on the "account" field.
func AccountNotIn(vs ...string) predicate.Balance {
	return predicate.Balance(sql.FieldNotIn(FieldAccount, vs...))
}

// AccountGT applies the GT predicate on the "account" field.
func AccountGT(v string) predicate.Balance {
	return predicate.Balance(sql.FieldGT(FieldAccount, v))
}

// AccountGTE applies the GTE predicate on the "account" field.
func AccountGTE(v string) predicate.Balance {
	return predicate.Balance(sql.FieldGTE(FieldAccount, v))
}

// AccountLT applies the LT predicate on the "account" field.
func AccountLT(v string) predicate.Balance {
	return predicate.Balance(sql.FieldLT(FieldAccount, v))
}

// AccountLTE applies the LTE predicate on the "account" field.
func AccountLTE(v string) predicate.Balance {
	return predicate.Balance(sql.FieldLTE(FieldAccount, v))
}

// AccountContains applies the Contains predicate on the "account" field.
func AccountContains(v string) predicate.Balance {
	return predicate.Balance(sql.FieldContains(FieldAccount, v))
}

// AccountHasPrefix applies the HasPrefix predicate on the "account" field.
func AccountHasPrefix(v string) predicate.Balance {
	return predicate.Balance(sql.FieldHasPrefix(FieldAccount, v))
}

// AccountHasSuffix applies the HasSuffix predicate on the "account" field.
func AccountHasSuffix(v string) predicate.Balance {
	return predicate.Balance(sql.FieldHasSuffix(FieldAccount, v))
}

// AccountEqualFold applies the EqualFold predicate on the "account" field.
func AccountEqualFold(v string) predicate.Balance {
	return predicate.Balance(sql.FieldEqualFold(FieldAccount, v))
}

// AccountContainsFold applies the ContainsFold predicate on the "account" field.
func AccountContainsFold(v string) predicate.Balance {
	return predicate.Balance(sql.FieldContainsFold(FieldAccount, v))
}

// BlockNumberEQ applies the EQ predicate on the "block_number" field.
func BlockNumberEQ(v *big.Int) predicate.Balance {
	vc, err := ValueScanner.BlockNumber.Value(v)
	return predicate.BalanceOrErr(sql.FieldEQ(FieldBlockNumber, vc), err)
}

// BlockNumberNEQ applies the NEQ predicate on the "block_number" field.
func BlockNumberNEQ(v *big.Int) predicate.Balance {
	vc, err := ValueScanner.BlockNumber.Value(v)
	return predicate.BalanceOrErr(sql.FieldNEQ(FieldBlockNumber, vc), err)
}

// BlockNumberIn applies the In predicate on the "block_number" field.
func BlockNumberIn(vs ...*big.Int) predicate.Balance {
	var (
		err error
		v   = make([]any, len(vs))
	)
	for i := range v {
		if v[i], err = ValueScanner.BlockNumber.Value(vs[i]); err != nil {
			break
		}
	}
	return predicate.BalanceOrErr(sql.FieldIn(FieldBlockNumber, v...), err)
}

// BlockNumberNotIn applies the NotIn predicate on the "block_number" field.
func BlockNumberNotIn(vs ...*big.Int) predicate.Balance {
	var (
		err error
		v   = make([]any, len(vs))
	)
	for i := range v {
		if v[i], err = ValueScanner.BlockNumber.Value(vs[i]); err != nil {
			break
		}
	}
	return predicate.BalanceOrErr(sql.FieldNotIn(FieldBlockNumber, v...), err)
}

// BlockNumberGT applies the GT predicate on the "block_number" field.
func BlockNumberGT(v *big.Int) predicate.Balance {
	vc, err := ValueScanner.BlockNumber.Value(v)
	return predicate.BalanceOrErr(sql.FieldGT(FieldBlockNumber, vc), err)
}

// BlockNumberGTE applies the GTE predicate on the "block_number" field.
func BlockNumberGTE(v *big.Int) predicate.Balance {
	vc, err := ValueScanner.BlockNumber.Value(v)
	return predicate.BalanceOrErr(sql.FieldGTE(FieldBlockNumber, vc), err)
}

// BlockNumberLT applies the LT predicate on the "block_number" field.
func BlockNumberLT(v *big.Int) predicate.Balance {
	vc, err := ValueScanner.BlockNumber.Value(v)
	return predicate.BalanceOrErr(sql.FieldLT(FieldBlockNumber, vc), err)
}

// BlockNumberLTE applies the LTE predicate on the "block_number" field.
func BlockNumberLTE(v *big.Int) predicate.Balance {
	vc, err := ValueScanner.BlockNumber.Value(v)
	return predicate.BalanceOrErr(sql.FieldLTE(FieldBlockNumber, vc), err)
}

// BlockNumberContains applies the Contains predicate on the "block_number" field.
func BlockNumberContains(v *big.Int) predicate.Balance {
	vc, err := ValueScanner.BlockNumber.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("block_number value is not a string: %T", vc)
	}
	return predicate.BalanceOrErr(sql.FieldContains(FieldBlockNumber, vcs), err)
}

// BlockNumberHasPrefix applies the HasPrefix predicate on the "block_number" field.
func BlockNumberHasPrefix(v *big.Int) predicate.Balance {
	vc, err := ValueScanner.BlockNumber.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("block_number value is not a string: %T", vc)
	}
	return predicate.BalanceOrErr(sql.FieldHasPrefix(FieldBlockNumber, vcs), err)
}

// BlockNumberHasSuffix applies the HasSuffix predicate on the "block_number" field.
func BlockNumberHasSuffix(v *big.Int) predicate.Balance {
	vc, err := ValueScanner.BlockNumber.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("block_number value is not a string: %T", vc)
	}
	return predicate.BalanceOrErr(sql.FieldHasSuffix(FieldBlockNumber, vcs), err)
}

// BlockNumberEqualFold applies the EqualFold predicate on the "block_number" field.
func BlockNumberEqualFold(v *big.Int) predicate.Balance {
	vc, err := ValueScanner.BlockNumber.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("block_number value is not a string: %T", vc)
	}
	return predicate.BalanceOrErr(sql.FieldEqualFold(FieldBlockNumber, vcs), err)
}

// BlockNumberContainsFold applies the ContainsFold predicate on the "block_number" field.
func BlockNumberContainsFold(v *big.Int) predicate.Balance {
	vc, err := ValueScanner.BlockNumber.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("block_number value is not a string: %T", vc)
	}
	return predicate.BalanceOrErr(sql.FieldContainsFold(FieldBlockNumber, vcs), err)
}

// BalanceEQ applies the EQ predicate on the "balance" field.
func BalanceEQ(v *big.Int) predicate.Balance {
	vc, err := ValueScanner.Balance.Value(v)
	return predicate.BalanceOrErr(sql.FieldEQ(FieldBalance, vc), err)
}

// BalanceNEQ applies the NEQ predicate on the "balance" field.
func BalanceNEQ(v *big.Int) predicate.Balance {
	vc, err := ValueScanner.Balance.Value(v)
	return predicate.BalanceOrErr(sql.FieldNEQ(FieldBalance, vc), err)
}

// BalanceIn applies the In predicate on the "balance" field.
func BalanceIn(vs ...*big.Int) predicate.Balance {
	var (
		err error
		v   = make([]any, len(vs))
	)
	for i := range v {
		if v[i], err = ValueScanner.Balance.Value(vs[i]); err != nil {
			break
		}
	}
	return predicate.BalanceOrErr(sql.FieldIn(FieldBalance, v...), err)
}

// BalanceNotIn applies the NotIn predicate on the "balance" field.
func BalanceNotIn(vs ...*big.Int) predicate.Balance {
	var (
		err error
		v   = make([]any, len(vs))
	)
	for i := range v {
		if v[i], err = ValueScanner.Balance.Value(vs[i]); err != nil {
			break
		}
	}
	return predicate.BalanceOrErr(sql.FieldNotIn(FieldBalance, v...), err)
}

// BalanceGT applies the GT predicate on the "balance" field.
func BalanceGT(v *big.Int) predicate.Balance {
	vc, err := ValueScanner.Balance.Value(v)
	return predicate.BalanceOrErr(sql.FieldGT(FieldBalance, vc), err)
}

// BalanceGTE applies the GTE predicate on the "balance" field.
func BalanceGTE(v *big.Int) predicate.Balance {
	vc, err := ValueScanner.Balance.Value(v)
	return predicate.BalanceOrErr(sql.FieldGTE(FieldBalance, vc), err)
}

// BalanceLT applies the LT predicate on the "balance" field.
func BalanceLT(v *big.Int) predicate.Balance {
	vc, err := ValueScanner.Balance.Value(v)
	return predicate.BalanceOrErr(sql.FieldLT(FieldBalance, vc), err)
}

// BalanceLTE applies the LTE predicate on the "balance" field.
func BalanceLTE(v *big.Int) predicate.Balance {
	vc, err := ValueScanner.Balance.Value(v)
	return predicate.BalanceOrErr(sql.FieldLTE(FieldBalance, vc), err)
}

// BalanceContains applies the Contains predicate on the "balance" field.
func BalanceContains(v *big.Int) predicate.Balance {
	vc, err := ValueScanner.Balance.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("balance value is not a string: %T", vc)
	}
	return predicate.BalanceOrErr(sql.FieldContains(FieldBalance, vcs), err)
}

// BalanceHasPrefix applies the HasPrefix predicate on the "balance" field.
func BalanceHasPrefix(v *big.Int) predicate.Balance {
	vc, err := ValueScanner.Balance.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("balance value is not a string: %T", vc)
	}
	return predicate.BalanceOrErr(sql.FieldHasPrefix(FieldBalance, vcs), err)
}

// BalanceHasSuffix applies the HasSuffix predicate on the "balance" field.
func BalanceHasSuffix(v *big.Int) predicate.Balance {
	vc, err := ValueScanner.Balance.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("balance value is not a string: %T", vc)
	}
	return predicate.BalanceOrErr(sql.FieldHasSuffix(FieldBalance, vcs), err)
}

// BalanceEqualFold applies the EqualFold predicate on the "balance" field.
func BalanceEqualFold(v *big.Int) predicate.Balance {
	vc, err := ValueScanner.Balance.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("balance value is not a string: %T", vc)
	}
	return predicate.BalanceOrErr(sql.FieldEqualFold(FieldBalance, vcs), err)
}

// BalanceContainsFold applies the ContainsFold predicate on the "balance" field.
func BalanceContainsFold(v *big.Int) predicate.Balance {
	vc, err := ValueScanner.Balance.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("balance value is not a string: %T", vc)
	}
	return predicate.BalanceOrErr(sql.FieldContainsFold(FieldBalance, vcs), err)
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Balance) predicate.Balance {
	return predicate.Balance(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Balance) predicate.Balance {
	return predicate.Balance(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Balance) predicate.Balance {
	return predicate.Balance(func(s *sql.Selector) {
		p(s.Not())
	})
}
